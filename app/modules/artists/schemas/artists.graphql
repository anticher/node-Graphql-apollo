type Band {
    name: String!
    origin: String
    membersId: [String]
    website: String
    genresIds: [String]
}

type Artist{
    id: ID!
    firstName: String!
    secondName: String!
    middleName: String
    birthPlace: String
    birthDate: String
    country: String
    bands: [Band]
    instruments: [String]
}

type ArtistOut {
    id: String!
    firstName: String
    secondName: String
    middleName: String
    birthPlace: String
    birthDate: String
    country: String
    bandsIds: [String]
    instruments: [String]
}

input AddArtistInput {
    firstName: String!
    secondName: String!
    middleName: String
    birthPlace: String
    birthDate: String
    country: String
    bandsIds: [String]
    instruments: [String]
}

input PutArtistInput {
    id: String!
    firstName: String
    secondName: String
    middleName: String
    birthPlace: String
    birthDate: String
    country: String
    bandsIds: [String]
    instruments: [String]
}

type Deleted {
    acknowledged: Boolean
    deletedCount: Int
}

type Query {
    artists(offset: Int, limit: Int): [Artist]
    artist(id: String): Artist
}
type Mutation {
    addArtist(artistInput: AddArtistInput!): ArtistOut!
    deleteArtist(id: String!): Deleted!
    updateArtist(artistInput: PutArtistInput!): ArtistOut!
}

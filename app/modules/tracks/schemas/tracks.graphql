type Band {
    name: String!
    origin: String
    membersId: [String]
    website: String
    genresIds: [String]
}

type Artist {
    firstName: String!
    secondName: String!
    middleName: String
    birthPlace: String
    birthDate: String
    country: String
    bandsIds: [String]
    instruments: [String]
}

type Genre {
    name: String!
    description: String
    country: String
    year: Int
}

type Album {
    name: String!
    released: Int
    artistsIds: [String]
    bandsIds: [String]
    trackIds: [String]
    genresIds: [String]
    image: String
}

type Track {
    id: ID!
    title: String!
    album: Album
    artists: [Artist]
    bands: [Band]
    duration: Int
    released: Int
    genres: [Genre]
}

type TrackOut {
    id: String!
    title: String!
    albumId: String
    artistsIds: [String]
    bandsIds: [String]
    duration: Int
    released: Int
    genresIds: [String]
}

input AddTrackInput {
    title: String!
    albumId: String
    artistsIds: [String]
    bandsIds: [String]
    duration: Int
    released: Int
    genresIds: [String]
}

input PutTrackInput {
    id: String!
    title: String
    albumId: String
    artistsIds: [String]
    bandsIds: [String]
    duration: Int
    released: Int
    genresIds: [String]
}

type Deleted {
    acknowledged: Boolean
    deletedCount: Int
}

type Query {
    tracks(offset: Int, limit: Int): [Track]
    track(id: String): Track
}

type Mutation {
    addTrack(trackInput: AddTrackInput!): TrackOut!
    deleteTrack(id: String!): Deleted!
    updateTrack(trackInput: PutTrackInput!): TrackOut!
}
